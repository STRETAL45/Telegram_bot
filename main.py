import telebot
import sqlite3
from telebot import types


bot = telebot.TeleBot('7081305312:AAGx0HTcYPTBBezWTp3O1Q6SoWYoFa5Gvuc')
name = None
password = None
place = None
adress = None
kategor = None
num = None
city = None
otzv_obj =None
text_otzv = None
place_otzv = None

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id,
                     "–ü—Ä–∏–≤–µ—Ç, –µ—Å–ª–∏ —Ç—ã –∑–∞–ø—É—Å—Ç–∏–ª —ç—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —Ç–æ –∑–Ω–∞—á–∏—Ç —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –ø–æ –ø–æ–∏—Å–∫—É –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –º–µ—Å—Ç–∞ –¥–ª—è –¥–æ—Å—É–≥–∞. –í —ç—Ç–æ–º —è —Ç–æ—á–Ω–æ —Å–º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å! –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –∏ –≤–ø–µ—Ä–µ–¥! ")

    bot.send_message(message.chat.id, "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ?")
    bot.register_next_step_handler(message, registration)


def registration(message):
    print(message)
    if message.text.lower() == '–¥–∞':
        bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ, –≤–≤–µ–¥–∏ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å.")
        bot.register_next_step_handler(message, logpas, 1)
    else:
        if message.text.lower() == '–Ω–µ—Ç':
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ª–æ–≥–∏–Ω")
            bot.register_next_step_handler(message, user_name)
        else:
            bot.send_message(message.chat.id, "–ù–µ —Å–æ–≤—Å–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ –í–∞—Å –ø–æ–Ω—è–ª, —Å—É–¥—è –ø–æ –≤—Å–µ–º—É, –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã... –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω")
            bot.register_next_step_handler(message, user_name)


def logpas(message, n):
    global city
    global name
    global password
    a = message.text.split()
    if len(a) < 2:
        a.append(' ')
    if not check(a[0], a[1]):
        bot.send_message(message.chat.id, f"–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
        bot.register_next_step_handler(message, logpas, n + 1)
    else:
        conn = sqlite3.connect("db_tg.db")
        cur = conn.cursor()
        cur.execute("SELECT * FROM users WHERE name=?", (a[0],))
        data = cur.fetchall()
        city = data[0][-1]
        print(city)
        name = a[0]
        password = a[-1]
        bot.send_message(message.chat.id, f"{a[0]}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
        callback(message)

    if n == 1:
        bot.register_next_step_handler(message, func)


def check(login, password):
    print(login, password)
    conn = sqlite3.connect("db_tg.db")
    cur = conn.cursor()
    cur.execute("SELECT * FROM users")
    users = cur.fetchall()
    res = False
    c = 0
    for i in users:
        print(i)
        if login == i[1] and password == i[2]:
            res = True
            break
    return res



def user_name(message):
    global name
    conn = sqlite3.connect("db_tg.db")
    cur = conn.cursor()
    cur.execute("SELECT * FROM users")
    users = cur.fetchall()
    name = message.text.strip()
    for i in users:
        if name in i:
            bot.send_message(message.chat.id, "–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ —Å–∏—Å—Ç–µ–ºe!")
            bot.register_next_step_handler(message, user_name)
            break
    else:
        bot.send_message(message.chat.id, f"{name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å")
        bot.register_next_step_handler(message, user_password)


def user_password(message):
    global password
    password = message.text.strip()
    bot.send_message(message.chat.id, f"C–ø–∞—Å–∏–±–æ! –û—Å—Ç–∞–ª–æ—Å—å –ª–∏—à—å –≤–≤–µ—Å—Ç–∏ –Ω—É–∂–Ω—ã–π –≤–∞–º –≥–æ—Ä–æ–¥.")
    bot.register_next_step_handler(message, user_savedate)


def user_savedate(message):
    global city
    city = message.text.strip()
    conn = sqlite3.connect("db_tg.db")

    cur = conn.cursor()
    cur.execute("SELECT * FROM users")
    cur.execute(f"INSERT INTO users (name, password, city) VALUES ('%s', '%s', '%s')" % (name, password, city))
    conn.commit()
    cur.close()
    conn.close()
    callback(message)


@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üè¢ –î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ")
    btn2 = types.KeyboardButton("üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
    btn3 = types.KeyboardButton("üíé –¢–û–ü –º–µ—Å—Ç")
    btn4 = types.KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
    markup.add(btn1, btn2, btn3, btn4)
    bot.send_message(call.chat.id,
                     text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –∑–∞–¥–∞—á—É.".format(
                         call.from_user), reply_markup=markup)


@bot.message_handler(content_types=['text'])
def func(message):
    global city
    global name
    global password
    if message.text == "üè¢ –î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ":
        bot.send_message(message.chat.id, text="–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞:")
        bot.register_next_step_handler(message, user_place)
    if message.text == "üíé –¢–û–ü –º–µ—Å—Ç":
        bot.send_message(message.chat.id, text="–ê –≤–æ—Ç –∏ —Ç–æ–ø –º–µ—Å—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏–π!")
        conn = sqlite3.connect('db_tg.db')
        cursor = conn.cursor()
        cursor.execute('''
            SELECT user_review, AVG(estimation) AS average_estimation
            FROM review
            GROUP BY user_review
            ORDER BY average_estimation DESC
            LIMIT 5
        ''')
        rows = cursor.fetchall()
        for i in range(len(rows)):
            bot.send_message(message.chat.id, text=f"{i + 1} - –ù–∞–∑–≤–∞–Ω–∏–µ: {rows[i][0]}, –û—Ü–µ–Ω–∫–∞: {rows[i][1]}")
        conn.close()
    if message.text == "üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤":
        conn = sqlite3.connect("db_tg.db")
        cur = conn.cursor()
        cur.execute("SELECT kategor FROM place WHERE city=?", (city,))
        users = cur.fetchall()
        cur.close()
        conn.close()
        bot.send_message(message.chat.id, text="–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—É—é –≤–∞–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –≤–≤–µ–¥–∏—Ç–µ –µ–µ –Ω–æ–º–µ—Ä.")
        # –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, —á—Ç–æ–±—ã –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–ª –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ü–µ–ª–∏–∫–æ–º, –∞ –Ω–µ –µ–µ –Ω–æ–º–µ—Ä
        for i in range(len(users)):
            bot.send_message(message.chat.id, text=f"{i + 1} - {users[i][0]}")
        bot.register_next_step_handler(message, otziv)
    if message.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç":
        conn = sqlite3.connect("db_tg.db")
        cur = conn.cursor()
        print(name)
        cur.execute("DELETE FROM users WHERE name=? AND password=?", (name, password))
        conn.commit()
        cur.close()
        conn.close()
        bot.reply_to(message, '–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.')
        bot.stop_polling()



def otziv(message):
    num_kat = message.text.strip()
    print(num_kat)
    conn = sqlite3.connect("db_tg.db")
    cur = conn.cursor()
    cur.execute("SELECT * FROM place WHERE city=? AND kategor=?", (city, num_kat,))
    place_kat = cur.fetchall()
    cur.close()
    conn.close()
    bot.send_message(message.chat.id, text="–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω–æ–µ –≤–∞–º –º–µ—Å—Ç–æ, –≤–≤–µ–¥–∏—Ç–µ –µ–µ –Ω–æ–º–µ—Ä.")
    for i in range(len(place_kat)):
        bot.send_message(message.chat.id, text=f"{i + 1} - –ù–∞–∑–≤–∞–Ω–∏–µ: {place_kat[i][2]}, –ê–¥—Ä–µ—Å: {place_kat[i][3]}")
    bot.register_next_step_handler(message, update_otzv)


def update_otzv(message):
    global otzv_obj
    global place_otzv
    place_otzv = message.text.strip()
    conn = sqlite3.connect("db_tg.db")
    cur = conn.cursor()
    cur.execute("SELECT * FROM review WHERE user_review=?", (place_otzv,))
    otzv_obj = cur.fetchall()
    cur.close()
    conn.close()
    for i in range(len(otzv_obj)):
        bot.send_message(message.chat.id, text=f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {otzv_obj[i][-1]}")
        bot.send_message(message.chat.id, text=f"{otzv_obj[i][2]}")
    bot.send_message(message.chat.id, text="–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏ —Å–≤–æ–π –æ—Ç–∑—ã–≤!")
    bot.register_next_step_handler(message, update_otzv2)


def update_otzv2(message):
    global text_otzv
    text_otzv = message.text.strip()
    callback2(message)


def update_otzv3(message):
    global text_otzv
    global name
    global place_otzv
    estimation_obj = None
    if message.text == "1:‚≠êÔ∏è":
        estimation_obj = 1
    if message.text == "2:‚≠êÔ∏è‚≠êÔ∏è":
        estimation_obj = 2
    if message.text == "3:‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏èÔ∏è":
        estimation_obj = 3
    if message.text == "4:‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è":
        estimation_obj = 4
    if message.text == "5:‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è":
        estimation_obj = 5
    print(estimation_obj)
    print(otzv_obj)
    conn = sqlite3.connect("db_tg.db")
    cur = conn.cursor()
    cur.execute("INSERT INTO review(user_review, place_review, estimation, user_data) VALUES (?, ?, ?, ?)",
                (place_otzv, text_otzv, estimation_obj, name,))
    conn.commit()
    cur.close()
    conn.close()


def user_place(message):
    global place
    place = message.text
    bot.send_message(message.chat.id, "–ö–∞–∫–æ–π –∞–¥—Ä–µ—Å —É –º–µ—Å—Ç–∞?")
    bot.register_next_step_handler(message, user_adress, 1)


def user_adress(message, n):
    print(n)
    global place
    global adress
    print(place, adress)
    adress = message.text.strip()
    if check2(place, adress):
        bot.send_message(message.chat.id, "–≠—Ç–æ –º–µ—Å—Ç–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        bot.register_next_step_handler(message, user_adress, n + 1)
    else:
        bot.send_message(message.chat.id, "–ö–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É –º–µ—Å—Ç–∞?")
        bot.register_next_step_handler(message, user_kat)



def check2(p, a):
    conn = sqlite3.connect("db_tg.db")
    cur = conn.cursor()
    cur.execute("SELECT * FROM place")
    users = cur.fetchall()
    res = False
    c = 0
    for i in users:
        print(i)
        if p == i[2] and a == i[3]:
            res = True
            break
    return res


def user_kat(message):
    global kategor
    kategor = message.text
    print(kategor)
    bot.send_message(message.chat.id, "–ü–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É!")
    bot.register_next_step_handler(message, user_num)


def user_num(message):
    global num
    num = message.text
    conn = sqlite3.connect("db_tg.db")
    cur = conn.cursor()
    cur.execute("INSERT INTO place(city, name_place, adress, kategor, num) VALUES (?, ?, ?, ?, ?)",
                (city, place, adress, kategor, num))
    conn.commit()
    cur.close()
    conn.close()
    bot.send_message(message.chat.id, f"–î–æ–±–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!")


@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    global city
    global place
    file_id = message.photo[-1].file_id
    file_info = bot.get_file(file_id)
    file_path = file_info.file_path
    downloaded_file = bot.download_file(file_info.file_path)
    with open(f'photos/{file_id}.jpg', 'wb') as new_file:
        new_file.write(downloaded_file)
    conn = sqlite3.connect("db_tg.db")
    cur = conn.cursor()
    print(file_path)
    cur.execute("UPDATE place SET picture=? WHERE city=? AND name_place=?", (file_path, city, place))
    conn.commit()
    # –¢—É—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏
    cur.close()
    conn.close()
    bot.send_message(message.chat.id, "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ!")
    conn = sqlite3.connect("db_tg.db")
    cur = conn.cursor()
    cur.execute("SELECT picture FROM place WHERE city=? AND name_place=?", (city, place))
    row = cur.fetchone()
    conn.close()

    if row:
        photo_path = row[0]
        with open(f'photos/file_id_retrieved.jpg', 'wb') as retrieved_file:
            retrieved_file.write(bot.download_file(photo_path))
        bot.send_photo(message.chat.id, open(f'photos/file_id_retrieved.jpg', 'rb'))
    else:
        bot.send_message(message.chat.id, "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    conn = sqlite3.connect("db_tg.db")
    cur = conn.cursor()
    cur.execute("INSERT INTO place(city, name_place, adress, kategor, num) VALUES (?, ?, ?, ?, ?)",
                (city, place, adress, kategor, num))
    conn.commit()
    cur.close()
    conn.close()
    bot.send_message(message.chat.id, f"–ù–∞–∑–≤–∞–Ω–∏–µ: {place} "
                                      f"–ê–¥—Ä–µ—Å: {adress} "
                                      f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {kategor} "
                                      f"–û—Ü–µ–Ω–∫–∞: {num}")


@bot.callback_query_handler(func=lambda call: True)
def callback2(call2):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("1:‚≠êÔ∏è")
    btn2 = types.KeyboardButton("2:‚≠êÔ∏è‚≠êÔ∏è")
    btn3 = types.KeyboardButton("3:‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è")
    btn4 = types.KeyboardButton("4:‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è")
    btn5 = types.KeyboardButton("5:‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è")

    markup.add(btn1, btn2, btn3, btn4, btn5)
    bot.send_message(call2.chat.id,
                     text="–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤, –∞ —Ç–µ–ø–µ—Ä—å –ø–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É!".format(
                         call2.from_user), reply_markup=markup)
    bot.register_next_step_handler(call2, update_otzv3)


bot.polling(none_stop=True)
